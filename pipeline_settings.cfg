#
# This is an exemplary pipeline-settings.cfg file. 
# It contains configuration entries for the mirna profiling pipeline.
#
#
# author: Pawel Sztromwasser
#



#
# Pipeline inputs
#

[Inputs]

# The pipeline can start from 2 places, which is determined by uncommenting one (and only one) of the options:
# 1) Input run-dir if the pipeline should start from bcl2fastq conversion. 
#    The path should be absolute. The directory is expected to contain SampleSheet.csv file - the input to bcl2fastq.
#run-directory:	/path/to/RUN_ID
#
# 2) Path (GLOB expression) describing location of single-end FASTQ files (relative to scratch-root). 
#    Multiple lanes per sample are supported; see pipeline code for the expected naming convention.
#    In dockerized execution mode the path is resolved relative to results-archive. In regular execution mode paths should be absolute. 
input-fastqs:	/work/raw_data/*.fastq.gz



#
# Root paths
#

[Paths]

# Root paths for working directory (scratch) and for reference data. Absolute paths must be provided. If scratch-root is unset, current working directory is used.
# When pipeline starts from bcl2fastq conversion (run_folder is set), scratch-root/RUN_ID (where RUN_ID is the same as in run_directory) is created and used as run's working directory. 
# When pipeline starts from FASTQ or BAM files, the scratch-root folder is used as a working directory.
# In dockerized mode:
# 1) reference-root will be mounted by docker containers with read-only access
# 2) run's working directory (scratch-root or scratch-root/RUN_ID) will be mounted with RW access
# 3) paths specified in sections Inputs and Resources will be resolved with respect to these root directories.
# In regular execution mode:
# 1) paths specified in Resources section will be resolved with respect to the reference-root directory.
reference-root:	    /work/reference
scratch-root:       /work/results


# Large-capacity tmp directory (if should be different than /tmp). 
# In dockerized mode it will be mounted to a docker container and used as tmp. 
# If commented out, the /tmp of the docker container is used.
# tmp-directory:		/tmp




#
# Docker settings
#
 
[Docker] 

# Other docker settings
#docker-binary:		docker
#docker-args:		run --rm



#
# Resources (databases, files)
# NOTE: Paths relative to root-reference
#

[Resources]

mirbase-fasta:          hairpin_hsa_revcomp.fa
genome-fasta:           GRCh38.fa
annotation-gtf:         Homo_sapiens.GRCh38.95.chr.gtf.gz

# adapters used for trimming
adapters-fasta:         adapters.fa



[Tools]

# Depending on the execution mode (dockerized or regular) the tool's definition should be provided in appropriate format. 
# For dockerized execution provide docker image name/ID, its version, and executable that should be run inside. 
# Exemplary settings below use "dpipe" image repository, and latest version of the image for each tool (NOTE: best practice is to use exact versioning).
# {args} and {interpreter_args} are place-holders for tool/execution arguments and interpreter arguments (such as -XmX4G in Java). 
# Detailed examples can be found in the pipeline source code: function run_cmd.
#

#bcl2fastq:				dpipe/bcl2fastq:latest bcl2fastq {args}
#trimmomatic:				dpipe/trimmomatic:latest trimmomatic {args} {interpreter_args}
#bwa:					dpipe/bwa_samtools:latest bwa_pipe.sh {args}
#samtools:				dpipe/bwa_samtools:latest samtools {args}
#picard-tools: 				dpipe/picard:latest picard {args} {interpreter_args} 
#gatk: 					dpipe/gatk:latest gatk {args} {interpreter_args}
## QualiMap is currently not supported in dockerized execution (image has not been created) 
#qualimap: 				dpipe/qualimap:latest qualimap {args} {interpreter_args}

# In regular execution mode (when docker binary setting is commented-out), the path to the tool's executable should be given, 
# or an interpreter (java/python/perl) together with the path to the tool. 
# Similarly as in tool descriptions above, {args} and {interpreter_args} are place-holders for the respective arguments.
#
#
bcl2fastq:              PATH/TO/bcl2fastq {args}
fastqc:                 fastqc {args}
trimmomatic:            trimmomatic {args}
bwa:                    bwa {args}
samtools:               samtools {args}
umitools:               umi_tools {args}
picard-tools:           picard {args}  
featurecounts:          featureCounts {args}

